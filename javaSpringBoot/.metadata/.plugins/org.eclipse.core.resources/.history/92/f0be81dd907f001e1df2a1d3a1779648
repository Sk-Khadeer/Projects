import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;

@Component
public class DatabaseMetadataExample {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public DatabaseMetadataExample(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    public void generateEntityClass(String tableName) throws SQLException {
        DatabaseMetaData metaData = jdbcTemplate.getDataSource().getConnection().getMetaData();
        ResultSet resultSet = metaData.getColumns(null, null, tableName, null);

        // Iterate over the result set and generate entity class
        while (resultSet.next()) {
            String columnName = resultSet.getString("COLUMN_NAME");
            String columnType = resultSet.getString("TYPE_NAME");

            // Generate entity class code based on columnName and columnType
            // ...

            System.out.println("Column Name: " + columnName + ", Column Type: " + columnType);
        }
    }

    public static void main(String[] args) throws SQLException {
        // Assuming this class is part of a Spring Boot application, it will be automatically
        // managed by Spring, and the DataSource will be injected.
        // If not part of a Spring Boot application, consider creating a Spring configuration class
        // and annotate it with @Configuration, @ComponentScan, etc.

        // Create an instance and generate entity class for "userinfo" table
        DatabaseMetadataExample example = new DatabaseMetadataExample(/* your DataSource bean */);
        example.generateEntityClass("userinfo");
    }
}
